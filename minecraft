#!/bin/bash
# /etc/init.d/minecraft

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Init script for minecraft/bukkit server, with rolling logs and use of ramdisk for less lag. 
### END INIT INFO

# Created by Ahtenus
# Modified by Peter

# Based on http://www.minecraftwiki.net/wiki/Server_startup_script
# Support for multiworld by Benni-chan
# Log rolls without needing restarts by Solorvox


# Loads config file

if [ -L $0 ]
then
	source `readlink $0 | sed "s:[^/]*$:config:"`
else
	source `echo $0 | sed "s:[^/]*$:config:"`
fi

if [ "$SERVICE" == "" ]
then
	echo "Couldn't load config file, please edit config.example and rename it to config"
	exit
fi


ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su - $USERNAME -c "$1"
	fi
}
datepath() {
	# datepath path filending-to-check returned-filending
	if [ -e $1`date +%F`$2 ]
	then
		echo $1`date +%F-%H%M`$3
	else
		echo $1`date +%F`$3
	fi
}
mc_start() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "Tried to start but $SERVICE was already running!"
	else
		echo "$SERVICE was not running... starting."
		cd $MCPATH
		as_user "cd $MCPATH && screen -dmS $SCREEN $INVOCATION"
		sleep 7
		if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
		then
			echo "$SERVICE is now running."
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_saveoff() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running... suspending saves"
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"save-off\"\015'"
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"save-all\"\015'"
		sync
		sleep 10
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running... re-enabling saves"
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"save-on\"\015'"
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_stop() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running... stopping."
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"save-all\"\015'"
		sleep 10
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"stop\"\015'"
		sleep 7
	else
		echo "$SERVICE was not running."
	fi
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE could not be shut down... still running."
	else
		echo "$SERVICE is shut down."
	fi
}
log_roll() {
        if [ ! -d $LOGPATH ]; then
                as_user "mkdir -p $LOGPATH"
        fi
        path=`datepath $LOGPATH/server_ .log.gz .log`
        as_user "cp $MCPATH/server.log $path && gzip $path"
	# only if previous command was successful
        if [ $? -eq 0 ]; then
                # turnacate the existing log without restarting server
                as_user "cp /dev/null $MCPATH/server.log"
                as_user "echo \"Previous logs rolled to $path\" > $MCPATH/server.log "
        else    
                echo "Failed to rotate logs to $LOGPATH/server_$path.log.gz"
        fi

}
get_worlds() {
	a=1
	for NAME in $(ls $WORLDSTORAGE)
	do
		if [ -d $WORLDSTORAGE/$NAME ]
		then
			WORLDNAME[$a]=$NAME
			if [ -e $WORLDSTORAGE/$NAME/ramdisk ]
			then
				WORLDRAM[$a]=true
			else
				WORLDRAM[$a]=false
			fi
			a=$a+1
		fi
	done
}
mc_whole_backup() {
	as_user "mkdir -p $WHOLEBACKUP"
	tmp=$WHOLEBACKUP/mc_back
	dest=$WHOLEBACKUP/minecraft.`date +%F-%H%M`
	as_user "cp -rP $MCPATH $tmp"
	case "$BACKUPFORMAT" in
		tar)
			as_user "tar -hcjf $dest.tar.bz2 $tmp"
			;;
		zip)
			as_user "7z a -tzip $dest.zip $tmp"
			;;
		*)
			echo "$BACKUPFORMAT is no supported backup format"
			;;
	esac
	as_user "rm -rf $tmp"
	
}
mc_world_backup() {
	thedate=`date +%F-%H%M`
	get_worlds
	today="" # If you want a folder for each day change to today="`date +%F`"
	for INDEX in ${!WORLDNAME[@]}
	do
		if ${WORLDRAM[$INDEX]}	#currently does not backup non-ramdisk worlds
		then
			echo "Backing up minecraft ${WORLDNAME[$INDEX]}"
			as_user "mkdir -p $BACKUPPATH/${today}"

			dest=$BACKUPPATH/${today}/${WORLDNAME[$INDEX]}/${WORLDNAME[$INDEX]}.$thedate
			tmp=$RAMDISK/${WORLDNAME[$INDEX]}.$thedate
			as_user "mkdir $tmp"
			as_user "cp -rxp $RAMDISK/${WORLDNAME[$INDEX]}/* $tmp/"

			case "$BACKUPFORMAT" in
				tar)
					as_user "tar -hcjf $dest.tar.bz2 $tmp"
					;;
				zip)
					as_user "7z a -tzip $dest.zip $tmp/*"
					;;
				*)
					echo "$BACKUPFORMAT is no supported backup format"
					;;
			esac
			as_user "rm -rf $tmp"
		fi
	done
}
check_links() {
	get_worlds
	for INDEX in ${!WORLDNAME[@]}
	do
		if [[ -L $MCPATH/${WORLDNAME[$INDEX]} || ! -a $MCPATH/${WORLDNAME[$INDEX]} ]]
		then
			link=`ls -l $MCPATH/${WORLDNAME[$INDEX]} | awk '{print $11}'`
			if ${WORLDRAM[$INDEX]}
			then
				if [ "$link" != "$RAMDISK/${WORLDNAME[$INDEX]}" ]
				then
					as_user "rm -f $MCPATH/${WORLDNAME[$INDEX]}"
					as_user "ln -s $RAMDISK/${WORLDNAME[$INDEX]} $MCPATH/${WORLDNAME[$INDEX]}"
					echo "created link for ${WORLDNAME[$INDEX]}"
				fi
			else
				if [ "$link" != "${WORLDSTORAGE}/${WORLDNAME[$INDEX]}" ]
				then
					as_user "rm -f $MCPATH/${WORLDNAME[$INDEX]}"
					as_user "ln -s ${WORLDSTORAGE}/${WORLDNAME[$INDEX]} $MCPATH/${WORLDNAME[$INDEX]}"
					echo "created link for ${WORLDNAME[$INDEX]}"
				fi
			fi
		else
			echo "could not process ${WORLDNAME[$INDEX]}. please move all worlds to ${WORLDSTORAGE}."
			exit 1
		fi
	done
	echo "links checked"
}
to_ram() {
	get_worlds
	as_user "mkdir -p $RAMDISK"
	for INDEX in ${!WORLDNAME[@]}
	do
		if ${WORLDRAM[$INDEX]}
		then
			if [ -L $MCPATH/${WORLDNAME[$INDEX]} ]
			then
				as_user "rsync -rt --exclude 'ramdisk' ${WORLDSTORAGE}/${WORLDNAME[$INDEX]}/ $RAMDISK/${WORLDNAME[$INDEX]}"
				echo "${WORLDNAME[$INDEX]} copied to ram"
			fi
		fi
	done
}
to_disk() {
	get_worlds
	for INDEX in ${!WORLDNAME[@]}
	do
		if ${WORLDRAM[$INDEX]}
		then
			tmp=`datepath $RAMDISK/${WORLDNAME[$INDEX]}_`
			as_user "mkdir $tmp"
			as_user "cp -rxp $RAMDISK/${WORLDNAME[$INDEX]}/* $tmp/"
			as_user "rsync -rt --exclude 'ramdisk' $tmp/ ${WORLDSTORAGE}/${WORLDNAME[$INDEX]}"
			as_user "rm -rf $tmp"
			echo "${WORLDNAME[$INDEX]} copied to disk"
		fi
	done
}
mc_update() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running! Will not start update."
	else
		### update minecraft_server.jar
		echo "Updating minecraft_server.jar...."
		MC_SERVER_URL=`wget -q -O - http://www.minecraft.net/download | grep minecraft_server.jar\  | cut -d \" -f 6`
		as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update $MC_SERVER_URL"
		if [ -f $MCPATH/minecraft_server.jar.update ]
		then
			if `diff $MCPATH/$MC_JAR $MCPATH/minecraft_server.jar.update >/dev/null`
			then
				echo "You are already running the latest version of the Minecraft server."
				as_user "rm $MCPATH/minecraft_server.jar.update"
			else
				as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/$MC_JAR"
				echo "Minecraft successfully updated."
			fi
		else
			echo "Minecraft update could not be downloaded."
		fi

		### update craftbukkit

		echo "Updating craftbukkit...."

		CB_URL="http://ci.bukkit.org/job/dev-CraftBukkit/lastSuccessfulBuild/artifact/target/"
		CB_SERVER_URL=$CB_URL`wget -q -O - $CB_URL | grep \>craftbukkit | cut -d \" -f 30`
		as_user "cd $MCPATH && wget -q -O $MCPATH/craftbukkit.jar.update $CB_SERVER_URL"
		if [ -f $MCPATH/craftbukkit.jar.update ]
		then
			if `diff $MCPATH/$CB_JAR $MCPATH/craftbukkit.jar.update > /dev/null`
			then
				echo "You are already running the latest version of CraftBukkit."
				as_user "rm $MCPATH/craftbukkit.jar.update"
			else
				as_user "mv $MCPATH/craftbukkit.jar.update $MCPATH/$CB_JAR"
				echo "CraftBukkit successfully updated."
			fi
		else
			echo "CraftBukkit update could not be downloaded."
		fi
	fi
}
change_ramdisk_state() {
	if [ ! -e $WORLDSTORAGE/$1 ]
	then
		echo "World \"$1\" not found."
		exit 1
	fi
	
	if [ -e $WORLDSTORAGE/$1/ramdisk ]
	then
		rm $WORLDSTORAGE/$1/ramdisk
		echo "removed ramdisk flag from \"$1\""
	else
		touch $WORLDSTORAGE/$1/ramdisk
		echo "added ramdisk flag to \"$1\""
	fi
	echo "changes will only take effect after server is restarted."	
}
start_overviewer() {
	if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
	then
		echo "$SERVICE is running! Will not start Overviewer."
	else

		if [ ! -e $OVPATH/overviewer.py ]
		then
			echo "Minecraft-Overviewer is not installed in \"$OVPATH\""
			exit 1
		fi

		if [ ! -e $WORLDSTORAGE/$1 ]
		then
			echo "World \"$1\" not found."
			exit 1
		fi
		if [ ! -e $OUTPUTMAP ]
		then
			as_user "mkdir -p $OUTPUTMAP"
		fi
		if [ -e $OVCONFIGPATH/$OVCONFIGNAME ]
		then
			echo "Start generating map with Minecraft-Overviewer"
			as_user "python $OVPATH/overviewer.py --settings $OVCONFIGPATH/$OVCONFIGNAME $WORLDSTORAGE/$1 $OUTPUTMAP" > /dev/null
			echo "Map generated"
		else
			echo "No config file found. Start with default config"
			echo "Start generating map with Minecraft-Overviewer"
			as_user "python $OVPATH/overviewer.py $WORLDSTORAGE/$1 $OUTPUTMAP" > /dev/null
			echo "Map generated"
		fi

	fi
}


case "$1" in
	start)
		# Starts the server
		check_links
		to_ram
		mc_start
		;;
	stop)
		# Stops the server
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER SHUTTING DOWN!\"\015'"
		mc_stop
		to_disk
		;;
	restart)
		# Restarts the server
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER REBOOT IN 10 SECONDS.\"\015'"
		mc_stop
		to_disk
		check_links
		to_ram
		mc_start
		;;
	backup)
		# Backups world
#		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say Backing up world.\"\015'"
#		mc_saveoff
		to_disk
		mc_world_backup
#		mc_saveon
#		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say Backup complete.\"\015'"
		;;
	whole-backup)
		# Backup everything
		mc_whole_backup
		;;
	update)
		#update minecraft_server.jar and craftbukkit.jar (thanks karrth)
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER UPDATE IN 10 SECONDS.\"\015'"
		mc_stop
		to_disk
		mc_whole_backup
		mc_update
		check_links
		mc_start
		;;
	to-disk)
		# Writes from the ramdisk to disk, in case the server crashes. 
		# Using ramdisk speeds things up a lot, especially if you allow
		# teleportation on the server.
		# Verify that the ramdisk is present before dumping
		if [ -d $RAMDISK ]
		then
#			mc_saveoff
			to_disk
#			mc_saveon
		else
			echo "Not dumping ramdisk as $RAMDISK does not exist."
		fi
		;;
	log-roll)
		# Moves and Gzips the logfile, a big log file slows down the
		# server A LOT (what was notch thinking?)
		# The existing log is turnacated to 0 file size.

		log_roll
		;;
	last)
		# greps for recently logged in users
		echo Recently logged in users:
		cat $MCPATH/server.log | awk '/entity|conn/ {sub(/lost/,"disconnected");print $1,$2,$4,$5}'
		;;
	status)
		# Shows server status
		if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
		then
			echo "$SERVICE is running."
		else
			echo "$SERVICE is not running."
		fi
		;;
	version)
		echo Craftbukkit version `awk '/Craftbukkit/ {sub(/\)/, ""); print $12}' $MCPATH/server.log`
		;;
	links)
		check_links
		;;
	ramdisk)
		change_ramdisk_state $2
		;;
	worlds)
		get_worlds
		for INDEX in ${!WORLDNAME[@]}
		do
			if ${WORLDRAM[$INDEX]}
			then
				echo "${WORLDNAME[$INDEX]} (ramdisk)"
			else
				echo ${WORLDNAME[$INDEX]}
			fi
		done
		;;
	overviewer)
		as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER SHUTTING DOWN!\"\015'"
		mc_stop
		to_disk
		start_overviewer $2
		check_links
		to_ram
		mc_start
		;;
	help)
		echo "Usage: /etc/init.d/minecraft command"
		echo 
		echo "start - Starts the server"
		echo "stop - stops the server"
		echo "restart - restarts the server"
		echo "backup - backups the worlds defined in the script"
		echo "whole-backup - backups the entire server folder"
		echo "update - fetches the latest version of minecraft.jar server and Bukkit"
		echo "log-roll - Moves and gzips the logfile"
		echo "to-disk - copies the worlds from the ramdisk to worldstorage"
		echo "status - Shows server status"
		echo "version - returns Bukkit version"
		echo "links - creates nessesary symlinks"
		echo "last - shows recently connected users"
		echo "worlds - shows a list of available worlds"
		echo "ramdisk WORLD - toggles ramdisk configuration for WORLD"
		echo "overviewer WORLD - create a map of the WORLD with Minecraft-Overviewer"
		;;
	*)
		echo "No such command see /etc/init.d/minecraft help"
		exit 1
		;;
esac

exit 0
